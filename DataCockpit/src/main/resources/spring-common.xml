<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans.xsd 
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="cn.bdqn.datacockpit.service.impl,cn.bdqn.datacockpit.utils" />
		
	<!-- JDBC操作模板 --> 
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg>
			<ref bean="basicDataSource"/>
		</constructor-arg>
	</bean>		
	
	<!-- 用于初始化获得Spring对象的类 -->  
    <bean id="springfactory" class="cn.bdqn.datacockpit.utils.SpringFactory"></bean> 

	<!-- 配置数据源 -->
	<bean id="basicDataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<!-- 配置driver/url/username/password -->
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql:///datacockpit"></property>
		<property name="username" value="root"></property>
		<property name="password" value="root"></property>
	</bean>

	<!-- 扫描保存sql语句的xml文件 -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 配置数据源 -->
		<property name="dataSource" ref="basicDataSource"></property>
		<!-- 指定xml文件所在的包路径 -->
		<property name="mapperLocations" value="classpath*:cn/bdqn/datacockpit/mapper/*.xml"></property>
	</bean>

	<!-- 扫描dao层中的java接口类 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.bdqn.datacockpit.mapper"></property>
	</bean>

	<!-- 配置事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="basicDataSource" />
	</bean>
	<!-- 事务注解驱动 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
		
		
	<!-- 自定义Realm -->
		<bean id="myRealm" class="cn.bdqn.datacockpit.realm.MyRealm"/>  
		
		<!-- 安全管理器 -->
		<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
	  	  <property name="realm" ref="myRealm"/>  
		</bean>  
		
		<!-- Shiro过滤器 -->
		<bean id="ShiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
		    <!-- Shiro的核心安全接口,这个属性是必须的 -->  
		    <property name="securityManager" ref="securityManager"/>
		    <!-- 身份认证失败，则跳转到登录页面的配置 -->  
		   <property name="loginUrl" value="/login.jsp"/> 
		    <!-- 权限认证失败，则跳转到指定页面 -->  
		    <property name="unauthorizedUrl" value="/login.jsp"/>  
		    <!-- Shiro连接约束配置,即过滤链的定义 -->  
		    <property name="filterChainDefinitions">  
		        <value>  
		            /login.jsp=anon
		            /pages/register.jsp=anon
		            /pages/wangjimima.jsp=anon
		            /pages/yonghuxieyi.jsp=anon
		            /getYzm.shtml=anon
		            /login.shtml=anon
		            /login2.shtml=anon
		            /user_index.shtml=authc
		            /selectAllCompanyinfo.shtml=authc
		            /*.shtml=authc
		            /*.jsp=authc 
		            <!-- 退出账号shiro清除session -->
		           	/exit.shtml=logout
		          <!--   /**=authc -->
		          <!-- （/**：表示所有请求，anon表示不拦截，authc表示当用户没有登录的时候拦截所有的请求）  所有请求继续向下执行 -->	
				<!-- /**=authc 	需要用户登录才可以继续向下执行 -->
		        </value>  
		    </property>
		</bean>  
		
		<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
		<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>  
		
		<!-- 开启Shiro注解 -->
		<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>  
	  		<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
	  	  <property name="securityManager" ref="securityManager"/>  
	    </bean> 
	    
	
</beans>
